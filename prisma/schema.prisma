generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Permission {
  NOT_VERIFIED
  USER
  ADMIN_CONGREGATION
  ADMIN_PLATFORM
  DEVELOPER
}

enum SpiritualStatus {
  PREACHER
  AUXILIARY_PIONEER
  REGULAR_PIONEER
  MINISTERIAL_SERVANT
  ELDER
}

model Congregation {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String        @unique
  users        User[]
  places       Place[]
  appointments Appointment[]
}

model User {
  id                  Int                     @id @default(autoincrement())
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  email               String                  @unique
  password            String?
  permission          Permission              @default(NOT_VERIFIED)
  congregation        Congregation?           @relation(fields: [congregationId], references: [id], onDelete: SetNull)
  congregationId      Int?
  spiritualStatus     SpiritualStatus?
  name                String?
  lastName            String?
  phoneNumber         String?                 @unique
  registrationToken   String?                 @unique
  passwordChangeToken String?                 @unique
  authorizations      Authorization[]
  appointments        AppointmentAssignment[]
  activities          Activity[]

  @@index([email])
}

model Authorization {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
}

model Place {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String        @unique
  congregation   Congregation  @relation(fields: [congregationId], references: [id], onDelete: Cascade)
  congregationId Int
  appointments   Appointment[]
}

model Appointment {
  id             Int                     @id @default(autoincrement())
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  start          DateTime
  end            DateTime
  place          Place                   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId        Int
  congregation   Congregation?           @relation(fields: [congregationId], references: [id], onDelete: Cascade)
  congregationId Int?
  assignments    AppointmentAssignment[]
}

model AppointmentAssignment {
  id            Int         @id @default(autoincrement())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int

  @@unique([appointmentId, userId])
}

model Activity {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  action       String
  actionParams Json?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  platform     String
  device       String
  browser      String
  addressIp    String
}
